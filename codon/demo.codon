from taichi import *
print("正在创建运行时...")
runtime = Runtime.create(arch=VULKAN)
print("✓ 运行时创建成功")

print("正在加载AOT模块...")
aot_module = AotModule.load(runtime, "/home/chh/taichi/deploy/field_aot_module")
print("✓ AOT模块加载成功")
print("正在获取 'a' kernel...")
kernel_name = "a"
print(f"请求的kernel名称: {kernel_name}")
print(f"kernel名称长度: {len(kernel_name)}")
kernel1 = get_kernel(aot_module,kernel_name)
print("✓ 成功获取 a kernel")
print("正在获取 'b' kernel...")
kernel2 = get_kernel(aot_module,"b")
print("✓ 成功获取 b kernel")
print("\n创建测试数据...")
data = np.random.rand(8, 8).astype(np.float32)
print(f"输入数据形状: {data.shape},dtype:{data.dtype.__name__}")
device_array = NdArray.from_numpy(runtime, data)
print(device_array.to_numpy_float32_2d())
print(device_array.to_numpy_float32_1d())
print("\n执行 a kernel...")
kernel1(device_array)
runtime.wait()
print("✓ a 执行完成")
 # 创建输出数组
device_array2 = NdArray.allocate(
    runtime,
    elem_type=F32,
    shape=[8, 8],
    elem_shape=[],
    host_access=True
)

# 执行第二个kernel
print("执行 b kernel...")
kernel2(device_array2)
runtime.wait()
print("✓ b 执行完成")
data2 = device_array2.to_numpy_float32_2d();
if np.allclose(data, data2, rtol=1e-5):
    print("\n✓ 数据传输验证成功！")
    print(f"输入数据样本: {data[:8, :8]}")
    print(f"输出数据样本: {data2[:8, :8]}")
else:
    print("\n✗ 数据传输验证失败！")
    print(data)
    print(data2)
    print(f"最大差异: {np.max(np.abs(data - data2))}")