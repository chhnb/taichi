LIBRARY = "/home/chh/taichi/_skbuild/linux-x86_64-3.10/cmake-install/python/taichi/_lib/c_api/lib/libtaichi_c_api.so"  
from C import LIBRARY.ti_default_compile_config()->ptr[byte]
from C import LIBRARY.ti_set_default_fp(Ptr[byte],int) -> None
from C import LIBRARY.ti_set_default_ip(Ptr[byte],int) -> None
from C import LIBRARY.ti_set_default_up(Ptr[byte],int) -> None
from C import LIBRARY.ti_create_program() -> ptr[byte]
from types import DataType

class _UninitializedRootFieldsBuilder:    
    @property    
    def qualname(self) -> str:
        return "_UninitializedRootFieldsBuilder"
    
    @property
    def root(self):
        raise NotImplementedError()
    
    @property
    def ptr(self):
        raise NotImplementedError()
    
    def __getitem__(self, key):
        raise NotImplementedError()


def default_cfg() -> Ptr[byte]:
    return ti_default_compile_config()

class PyTaichi:  
    materialized: bool
    inside_kernel: bool
    prog: Optional[Ptr[byte]]
    kernels: List[Ptr[byte]]
    default_fp: int
    default_ip: int
    default_up: int
    short_circuit_operators: bool
    unrolling_limit: int 
    def __init__(self, kernels: Optional[List[Ptr[byte]]] = None):    
        self.materialized = False    
        self.prog = None
        self.inside_kernel = False    
        self.kernels = kernels if kernels is not None else []
        self.default_fp = DataType.f32
        self.default_ip = DataType.i32
        self.default_up = DataType.u32
        short_circuit_operators = True
        print_full_traceback = False
        unrolling_limit = 32


    def set_default_fp(self, fp:int):
        assert fp in [DataType.f16,DataType.f32,DataType.f64]
        cfg = impl.default_cfg()
        self.default_fp = fp
        ti_set_default_fp(cfg,fp)
    
    def set_default_ip(self,ip: int):
        assert ip in [DataType.i32,DataType.i64]
        up = DataType.u32
        if ip == DataType.i64:
            up = DataType.u64
        cfg = impl.default_cfg()
        ti_set_default_ip(cfg,ip)
        ti_set_default_up(cfg,up)
        self.default_up = up
        self.default_ip = ip

    def create_program(self):
        if self.prog is None:
            self.prog = ti_create_program()
    
    def clear(self):
        pass


pytaichi = PyTaichi()

def get_runtime():
    return pytaichi

# def reset():
#    global pytaichi
#    old_kernels = pytaichi.kernels
#    pytaichi.clear()
#    pytaichi = PyTaichi(old_kernels)
#    for k in old_kernels:
#        k.reset()
#    _ti_core.reset_default_compile_config()
